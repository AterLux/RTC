/*
 * text.h
 *
 * Модуль для отображения текстовой информации
 *
 * Author: Погребняк Дмитрий (Pogrebnyak Dmitry, http://aterlux.ru/)
 */ 


#ifndef TEXT_H_
#define TEXT_H_

#include <avr/io.h>
#include <avr/pgmspace.h>

// Флаг: вверху старший бит
#define FONT_FLAG_MSBUP 0x80 
// Флаг: добавить пустую колонку до символа
#define FONT_FLAG_BLANK_BEFORE 0x02 
// Флаг: добавить пустую колонку после символа
#define FONT_FLAG_BLANK_AFTER 0x01 



/* Сбрасывает все настройки отображения текста на значения по-умолчанию. Не влияет на выбранный шрифт */
void text_reset();

/* Выбирает указанный шрифт */
void text_select_font(PGM_VOID_P font);

/* Устанавливает позицию вывода текста */
void text_set_pos(uint8_t page, uint8_t x);


/* Ограничивает горизонтальный вывод текста. При достижении этой позиции вывод текста остановится */
uint8_t text_set_limit_x(uint8_t limit_x);

/* Выводит один символ. После вывода горизонтальная позиция будет увеличина на ширину символа */
uint8_t text_char(uint8_t code);

/* Вычисляет ширину в пикселях, требующуюся для вывода указанного символа с учётом текущих настроек шрифта */
uint8_t text_char_width(uint8_t code);


/* Задаёт двухкратное увеличение размера шрифта, по вертикали по горизонтали или обоим направлениям сразу. */
void text_set_2x(uint8_t horizontal2x, uint8_t vertical2x);

/* Включает или выключает инверсию выводимого текста. */
void text_set_inversion(uint8_t inverted);

/* Очищает область экрана заданной ширины (в пикселях) начиная от текущей позиции текста, и соответствующе увеличивает значение текущий позиции
 * Высота очищаемой области зависит от высоты выбранного шрифта и настройки его вертикального увеличения.
 * Если выбран режим инверсии, то заполняет указанную область активными пикселями */
uint8_t text_blank(uint8_t width);

/* Очищает область экрана от текущей позиции текста до позиции toX, и соответствующе увеличивает значение текущий позиции
 * Высота очищаемой области зависит от высоты выбранного шрифта и настройки его вертикального увеличения.
 * Если выбран режим инверсии, то заполняет указанную область активными пикселями
 * если текущая позиция уже больше toX, то ничего не делает */
uint8_t text_pad(uint8_t toX);

/* Печатает строку, завершённую нулевым байтом, из флеш-памяти */
uint8_t text_print(PGM_P pgmStr);

/* Вычисляет ширину, требующуюся для вывода указанной строки, завершённоё нулевым байтом, находящейся во флеш-памяти */
uint16_t text_width(PGM_P pgmStr);

/* Печатает беззнаковое число. Если decpoint > 0 - то выводит точку перед указанным числом правых символов, при необходимости дополняет нулями слева.
 * 0 <= decpoint <= 9. Например text_unum(123, 1) выведет "12.3"; text_unum(123, 4) - "0.0123"   */
uint8_t text_unum(uint32_t num, uint8_t decpoint);

/* Вычисляет ширину, необходимую для вывода указанного беззнакового числа */
uint16_t text_unum_width(uint32_t num, uint8_t decpoint);

/* Печатает знаковое число. Если число отрицательное, выводит в начале знак минус
 * Если decpoint > 0 - то выводит точку перед указанным числом правых символов, при необходимости дополняет нулями слева.
 * 0 <= decpoint <= 9. Например text_unum(-123, 2) выведет "-1.23" */
uint8_t text_snum(int32_t num, uint8_t decpoint);

/* Вычисляет ширину, необходимую для вывода указанного числа со знаком */
uint16_t text_snum_width(int32_t num, uint8_t decpoint);



#endif /* TEXT_H_ */